git 配置config
git config --global user.name "Your Name"
git config --global user.email "email@example.com"

git 查看config配置信息
git config --system/global/local --list
system(系统级别) > global(用户级别) > local(当前仓库)

git init 初始化仓库

git 分为 Index(暂存区)， Working Directory(用户操作区)， HEAD 指向分支的最后一次commit
git只能commit Index里的东西，git add将修改的文件内容同步到Index区域。
git reset会修改版本历史，会丢弃一些版本历史。
git revert是根据那个commit逆向生成一个新的commit,版本历史不会被破坏。
所以commit一但push到远程仓库，坚决不允许reset,因为会影响基于这个commit形成的其他commit。

git add 将文件添加到仓库（把修改的文件同步到Index）
同时add多个文件，用空格隔开
git commit -m "提交信息" 将文件提交到仓库
git status 查看git仓库状态
git diff 查看修改内容
git log 查看提交日志（可以加上 --pretty=oneline简化信息）
HEAD表示当前版本，即最新提交的.上一个版本就是HEAD^,上上个版本就是HEAD^^,上100个版本就是HEAD~100
git reset --hard HEAD^回退到上一个版本
HEAD^可以改为commit id（写前几位就可以了）来指定回退版本
git reflog 记录每一次命令，可以查看命令历史。

eg: 
操作： 修改1 --> add --> 修改2 --> commit
结果： 只commit 修改1， 因为修改2没有add。

git diff HEAD -- filename 查看工作区和版本库里最新版本的区别
git checkout -- file 丢弃工作区的修改
一：file修改后还未放到暂存区，执行后和原版本库一模一样
二：file已经添加到暂存区，又作了修改，执行后回到添加到暂存区后的状态
即回到最近一次git commit或git add时的状态
git reset HEAD file把暂存区的修改撤销，重新放回工作区

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，版本回退，前提是没有推送到远程库。

从版本库中删除文件
本地rm file -> git rm file -> git commit -m "message"
误删恢复（只能恢复到最新版本）
本地rm file -> git checkout -- file

远程仓库
1.创建SSH Key
ssh-keygen -t rsa -C "email@example.com" (然后一路回车，使用默认值就好了)
2.github上Add SSH Key，Key文本框里粘贴id_rsa.pub文件的内容，文件在用户主目录的.ssh目录下

同步本地仓库和远程仓库
git remote add origin 地址
git push -u origin master (第一次push加上-u参数)
之后只要本地commit，就可以直接git push origin master推送至github

从远程库克隆到本地
git clone 地址

remote origin already exists解决办法
git remote rm origin后再git remote add origin 地址

git branch 查看分支
git branch <name> 创建分支
git checkout <name> 切换分支
git checkout -b <name> 创建+切换分支
git merge <name> 合并某分支到当前分支
git branch -d <name> 删除分支
git log --graph --pretty=oneline --abbrev-commit 查看分支合并情况
git merge --no-ff -m "提交信息" <branchname> (禁用Fast forward合并分支，即普通模式合并)
普通模式合并可以在合并后的历史中查看历史合并记录，而fast forward合并就看不出来。
git stash 存储当前分支
git stash list 查看存储分支
git stash apply 恢复分支（stash内容并不删除）,git stash drop删除stash内容
git stash drop 恢复的同时把stash内容删除
git branch -D <name> 强行删除一个未合并的分支
git remote 查看远程库
git remote -v 显示更详细的信息
git push origin master 将master分支推送到远程库对应的远程分支上
git checkout -b <name> origin/<name> 创建远程origin的<name>分支到本地
git pull 将远程分支抓取到本地
git branch --set-upstream dev origin/dev 设定dev和origin/dev的链接
git tag <name> 新建一个标签，默认为HEAD，也可以指定一个commit id
git tag -a <tagname> -m "XXXXX" <commit id> 可以指定标签信息
git tag -s <tagname> -m "XXXXX" <commit id> 可以用PGP签名标签
-a 指定标签名 -m 指定说明文字 -s 用私钥签名一个标签
git tag 查看所有标签
git show <tagname> 查看说明文字
git tag -d <tagname> 删除标签
git push origin <tagname> 推送某个标签到远程
git push origin --tags 一次性推送全部尚未推送到远程的本地标签
删除远程标签：
1. 本地删除 git tag -d <tagname>
2. 远程删除 git push origin :refs/tags/<tagname>

忽略特殊文件
创建一个 .gitignore文件，把要忽略的文件名填进去，git就会自动忽略略这些文件
git add -f <filename> 强制添加已忽略的文件到git
git check-ignore检查.gitignore哪里有问题
git check-ignore -v <filename>

git config --global alias.co checkout 用co 表示 checkout